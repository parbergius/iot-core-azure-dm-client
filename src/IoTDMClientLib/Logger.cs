using Microsoft.ApplicationInsights;
using Microsoft.ApplicationInsights.Extensibility;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Windows.Foundation.Diagnostics;

namespace Microsoft.Devices.Management
{
    public class Logger
    {
        /*
            You can collect the events generated by this method with xperf or another
            ETL controller tool. To collect these events in an ETL file:

            xperf -start MySession -f MyFile.etl -on 8aac9209-1e2b-5166-31b6-7c4af4bf7d27
            (call LogError())
            xperf -stop MySession

            After collecting the ETL file, you can decode the trace using xperf, wpa,
            or tracerpt. For example, to decode MyFile.etl with tracerpt:

            tracerpt MyFile.etl
            (generates dumpfile.xml)
        */


        private TelemetryClient _telemetryClient;
        private string _deviceId;

        public Logger(string instrumentationKey)
        {
            _deviceId = "Unknown";

#if DEBUG
            TelemetryConfiguration.Active.TelemetryChannel.DeveloperMode = true;
#endif

            TelemetryConfiguration.Active.InstrumentationKey = instrumentationKey;

            _telemetryClient = new TelemetryClient();
        }

        public void SetDeviceId(string deviceId)
        {
            _deviceId = deviceId;
        }

        public void LogEvent(string eventName)
        {
            using (var channel = new LoggingChannel("IoTDMBackground", null)) // null means use default options.
            {
                // Use this Id in xperf parameter
                Debug.WriteLine(channel.Id);
                channel.LogEvent(eventName);
            }

            _telemetryClient.TrackEvent(eventName, new Dictionary<string, string>()
            {
                { "DeviceId", _deviceId },                
            });

            System.Diagnostics.Debug.WriteLine($"Event: {eventName}");

        }

        public void LogInformation(string message)
        {
            using (var channel = new LoggingChannel("IoTDMBackground", null)) // null means use default options.
            {
                // Use this Id in xperf parameter
                Debug.WriteLine(channel.Id);
                channel.LogMessage(message, LoggingLevel.Information);
            }

            _telemetryClient.TrackTrace(message, ApplicationInsights.DataContracts.SeverityLevel.Information, new Dictionary<string, string>()
            {
                { "DeviceId", _deviceId },
            });

            System.Diagnostics.Debug.WriteLine($"Information: {message}");

        }

        public void LogException(string message, Exception exception)
        {
            using (var channel = new LoggingChannel("IoTDMBackground", null)) // null means use default options.
            {
                // Use this Id in xperf parameter
                Debug.WriteLine(channel.Id);
                channel.LogMessage(exception.Message, LoggingLevel.Error);
            }

            _telemetryClient.TrackException(exception, new Dictionary<string, string>()
            {
                { "DeviceId", _deviceId },
                { "Message", message }
            });

            System.Diagnostics.Debug.WriteLine($"Exception: {message}");
        }
    }
}
